# Let's start with some settings
BOILERPLATE_DIRECTORY="${HOME}/Sites/boilerplate"
BOILERPLATE_TARBALL_PATH="https://github.com/vitorbritto/boilerplate/tarball/master/wordpress"
LIBS_DIRECTORY="${HOME}/.forcefiles/lib"
source ${LIBS_DIRECTORY}/utils

# If missing, download and extract the boilerplate repository
if [[ ! -d ${BOILERPLATE_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading repository...\033[m\n"
    mkdir ${BOILERPLATE_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/wp-boilerplate.tar.gz ${BOILERPLATE_TARBALL_PATH}
    # Extract to the boilerplate directory
    tar -zxf ${HOME}/wp-boilerplate.tar.gz --strip-components 1 -C ${BOILERPLATE_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/wp-boilerplate.tar.gz
fi

# Declare my local variables
local app=$@

# This guy will rename the project name for what I want
rename_wp_project() {
    printf "Please enter a name for this project (e.g: my-new-project):"
    read -p "Enter your name here: " app
    mv -f -v wp-boilerplate $app && cd $app
}

# It will open my editor
open_wp_project() {
    e_header "Opening your editor..."
    subl .
    [[ $? ]] && e_success "Done!"
}

# And finally, we initialize the server (or remote server)
# BUT I'm still working on alternative method with node and socket.io

server_wp_project() {

    # Ask for remote server
    seek_confirmation "Do you want to run a remote server?"

    if is_confirmed; then

        seek_confirmation "Do you want to run cross-devices testing?"

        if is_confirmed; then
            # Using localtunnel for cross-devices testing
            localtunnel -k ~/.ssh/id_rsa.pub 8080
            localtunnel 8000
            e_success "Done! Use the generated url to run your cross-devices testing."

            # Test using node + socket.io + express
            # execute with node server.js
        else
            # Using PHP Web Server
            e_header "Please, wait..."
            php -S 0.0.0.0:8000
            e_success "Remote server OK! Redirecting you..."
            open "http://0.0.0.0:8000"
        fi

    else
        e_header "Starting local server..."
        cd ~/Sites && php -S localhost:8000 -t ${app}/
        open "http://localhost/${app}:8000"
    fi
}


# Let's rock!
printf "Please, wait... "
rename_wp_project
open_wp_project
server_wp_project