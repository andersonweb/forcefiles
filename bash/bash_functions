#!/bin/bash


# Create a data URI from a file
datauri() {

    local mimeType=""

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:%s;base64,%s" \
                    "$mimeType" \
                    "$(openssl base64 -in "$1" | tr -d "\n")"
    else
        print_error "'$1' is not a file."
    fi

}

# Delete all files that match a certain pattern from the current directory
deletefiles() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# Get gzip information (gzipped file size + reduction size)
gz() {

    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1")
            #                  └─ very slow for large files, but `stat -c%s`
            #                     or `du -b` don't work on Mac OS X :(
            printf "\n original size:   %12s\n" "$(hrfs $originalSize)"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs $gzippedSize)"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                        "$( hrfs $(($originalSize-$gzippedSize)) )" \
                        "$( printf "%s %s" "$originalSize $gzippedSize" | \
                            awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                            sed -e 's/0*$//;s/\.$//' )"
                            #              └─ remove tailing zeros

        else
            print_error "'$1' is empty."
        fi
    else
        print_error "'$1' is not a file."
    fi

}

# Create new directories and enter the first one
mkd() {
    if [ -n "$*" ]; then
        mkdir -p "$@" && cd "$@"
        #      └─ make parent directories if needed
    fi
}

# Search History
qh() {
    #                                 ┌─ enable colors for pipe
    #                                 │  ("--color=auto" enables colors only if
    #                                 │  the output is in the terminal)
    cat ~/.bash_history | grep --color=always "$*" | less -RX
    # display the ANSI color escape sequences in raw form ─┘│
    #           don't clear the screen after quitting less ─┘
}

# Search for text within the current directory
qt() {
    grep -ir --color=always "$*" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}

copydir() {
  pwd | tr -d "\r\n" | pbcopy
}

copyfile() {
  [[ "$#" != 1 ]] && return 1
  local file_to_copy=$1
  cat $file_to_copy | pbcopy
}


# # Check packages versions
checkversion() {
    local utilities="brew node npm rvm gem rails bower grunt yo"
    printf " ──────────────────────────────────────────\n"
    printf "Utilities Versions:" $utilities --version "\n"
    printf " ──────────────────────────────────────────\n"
}


# Registering Bower packages
bowereg() {
    bower register "$@" "$@"
}

# Install a grunt plugin and save to devDependencies
grunti() {
  npm install grunt-"$@" --save-dev
}

# Install a grunt-contrib plugin and save to devDependencies
gruntci() {
  npm install grunt-contrib-"$@" --save-dev
}

# Start an HTTP server from a directory, optionally specifying the port
pyserver() {
    # Get port (if specified)
    local port="${1:-8000}"

    # Open in the browser
    open "http://localhost:${port}/"

    # Redefining the default content-type to text/plain instead of the default
    # application/octet-stream allows "unknown" files to be viewable in-browser
    # as text instead of being downloaded.
    #
    # Unfortunately, "python -m SimpleHTTPServer" doesn't allow you to redefine
    # the default content-type, but the SimpleHTTPServer module can be executed
    # manually with just a few lines of code.
    python -c $'import SimpleHTTPServer;\nSimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map[""] = "text/plain";\nSimpleHTTPServer.test();' "$port"
}
