#!/bin/bash

# bash_functions

# General
# -------------------

# Create a data URI from a file
datauri() {

    local mimeType=""

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:%s;base64,%s" \
                    "$mimeType" \
                    "$(openssl base64 -in "$1" | tr -d "\n")"
    else
        print_error "'$1' is not a file."
    fi

}

# Delete all files that match a certain pattern from the current directory
deletefiles() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# Get gzip information (gzipped file size + reduction size)
gz() {

    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1")
            #                  └─ very slow for large files, but `stat -c%s`
            #                     or `du -b` don't work on Mac OS X :(
            printf "\n original size:   %12s\n" "$(hrfs $originalSize)"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs $gzippedSize)"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                        "$( hrfs $(($originalSize-$gzippedSize)) )" \
                        "$( printf "%s %s" "$originalSize $gzippedSize" | \
                            awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                            sed -e 's/0*$//;s/\.$//' )"
                            #              └─ remove tailing zeros

        else
            print_error "'$1' is empty."
        fi
    else
        print_error "'$1' is not a file."
    fi

}

# Create new directories and enter the first one
mkd() {
    if [ -n "$*" ]; then
        mkdir -p "$@" && cd "$@"
        #      └─ make parent directories if needed
    fi
}

# Remove directories and echo a message
rmd() {
    rm -r "$@"
}

# Search History
qh() {
    #                                 ┌─ enable colors for pipe
    #                                 │  ("--color=auto" enables colors only if
    #                                 │  the output is in the terminal)
    cat ~/.bash_history | grep --color=always "$*" | less -RX
    # display the ANSI color escape sequences in raw form ─┘│
    #           don't clear the screen after quitting less ─┘
}

# Search for text within the current directory
qt() {
    grep -ir --color=always "$*" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}

copydir() {
  pwd | tr -d "\r\n" | pbcopy
}

copyfile() {
  [[ "$#" != 1 ]] && return 1
  local file_to_copy=$1
  cat $file_to_copy | pbcopy
}


# Package Manager
# -------------------

# Check packages versions
# checkversion() {
#     e_header "Checking versions of modules and packages..."
#         local modules_versions=(
#             'brew'
#             'node'
#             'npm'
#             'rvm'
#             'gem'
#             'rails'
#             'bower'
#             'grunt'
#             'yo'
#         )
#     printf " ──────────────────────────────────────────\n"
#     for index in ${modules_versions}
#         do
#             printf '$modules_versions Version: $modules_versions --version \n'
#         done
#     printf " ──────────────────────────────────────────\n"
# }

# Registering Bower packages
bowereg() {
    bower register "$@" "$@"
}

# Install a grunt plugin and save to devDependencies
grunti() {
  npm install grunt-"$@" --save-dev
}

# Install a grunt-contrib plugin and save to devDependencies
gruntci() {
  npm install grunt-contrib-"$@" --save-dev
}


# Rsync
# -------------------

# Synchronize a local directory with a remote one
rsyncpulldir() {
    rsync -r -a -v -e "ssh -l $1" --delete $2
}

# Synchronize a remote directory with a local one
rsyncpushdir() {
    rsync -r -a -v -e "ssh -l $1" --delete $2
}

# Synchronize a local file with a remote one
rsyncpullfile() {
    rsync -a -v -e "ssh -l $1" $2
}

# To synchronize a remote file with a local one, use:
rsyncpushfile() {
    rsync -a -v -e "ssh -l $1" $2
}

# Synchronize a local directory with a local directory (make a backup)
rsyncbackup() {
    rsync -r -a -v --delete $@
}


# Servers - Working on this...
# -------------------

# Initialize Server
run_server() {

    # Point and source dependencies
    FORCEFILES_DIRECTORY="${HOME}/.forcefiles"
    cd ${FORCEFILES_DIRECTORY}

    source ./lib/utils

    local app=$@

    # Ask for remote server
    seek_confirmation "Do you want to run a remote server?"

    if is_confirmed; then

        seek_confirmation "Do you want to run cross-devices testing?"

        if is_confirmed; then
            # Using localtunnel for cross-devices testing
            localtunnel -k ~/.ssh/id_rsa.pub 8080
            localtunnel 8000
            e_success "Done! Use the generated url to run your cross-devices testing."
        else
            # Using PHP Web Server
            e_header "Please, wait..."
            php -S 0.0.0.0:8000
            e_success "Remote server OK! Redirecting you..."
            open "http://0.0.0.0:8000"
        fi

    else
        e_header "Starting local server..."
        cd ~/Sites && php -S localhost:8000 -t ${app}/
        open "http://localhost/${app}:8000"
    fi

}


# Start an HTTP server from a directory, optionally specifying the port
py_server() {
    local port="${1:-8000}"
    open "http://localhost:${port}/"
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}
