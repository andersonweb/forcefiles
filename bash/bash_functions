#!/bin/bash

# bash_functions

#
# General
# ---------------------------------------------------

# Adds an alias to the current shell and to bash_aliases file.
# Borrowed from Mislav (http://github.com/mislav/dotfiles/tree/master/bash_aliases)
add-alias() {
   local name=$1 value=$2
   printf "alias $name='$value'" >> ~/.forcefiles/bash/bash_aliases
   eval "alias $name='$value'"
   alias $name
}

# Create a data URI from a file
datauri() {
    local mimeType=""

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:%s;base64,%s" \
                    "$mimeType" \
                    "$(openssl base64 -in "$1" | tr -d "\n")"
    else
        print_error "'$1' is not a file."
    fi
}

# Delete all files that match a certain pattern from the current directory
deletefiles() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# Get gzip information (gzipped file size + reduction size)
gz() {
    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1")
            #                  └─ very slow for large files, but `stat -c%s`
            #                     or `du -b` don't work on Mac OS X :(
            printf "\n original size:   %12s\n" "$(hrfs $originalSize)"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs $gzippedSize)"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                        "$( hrfs $(($originalSize-$gzippedSize)) )" \
                        "$( printf "%s %s" "$originalSize $gzippedSize" | \
                            awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                            sed -e 's/0*$//;s/\.$//' )"
                            #              └─ remove tailing zeros

        else
            print_error "'$1' is empty."
        fi
    else
        print_error "'$1' is not a file."
    fi
}

# Create new directories and enter the first one
mkd() {
    if [ -n "$*" ]; then
        mkdir -p "$@" && cd "$@"
        #      └─ make parent directories if needed
    fi
}

# Remove directories and echo a message
rmd() {
    rm -r "$@"
}

# Search History
qh() {
    #                                 ┌─ enable colors for pipe
    #                                 │  ("--color=auto" enables colors only if
    #                                 │  the output is in the terminal)
    cat ~/.bash_history | grep --color=always "$*" | less -RX
    # display the ANSI color escape sequences in raw form ─┘│
    #           don't clear the screen after quitting less ─┘
}

# Search for text within the current directory
qt() {
    grep -ir --color=always "$*" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}

copydir() {
  pwd | tr -d "\r\n" | pbcopy
}

copyfile() {
  [[ "$#" != 1 ]] && return 1
  local file_to_copy=$1
  cat $file_to_copy | pbcopy
}


#
# Development (based on my workflow)
# ---------------------------------------------------

# Package Managers
# -------------------

# Registering Bower packages
bowereg() {
    bower register "$@" "$@"
}

# Install a grunt plugin and save to devDependencies
grunti() {
  npm install grunt-"$@" --save-dev
}

# Install a grunt-contrib plugin and save to devDependencies
gruntci() {
  npm install grunt-contrib-"$@" --save-dev
}

yogen() {
    sudo npm i "$@" -gq
}

# Quickly clone all gruntjs repos (for grunt development)
gruntclone() {
    mkdir "$@" && cd "$@"
    curl -fsSLO https://raw.github.com/gruntjs/clone-repos/master/clone-repos
    chmod +x clone-repos
    ./clone-repos
}

# Development
# -------------------

# Shortcut to General Projects
dev() {
    cd Sites/projects/"$@"
    # subl .
}

# Shortcut to Respositories
repos() {
    cd Sites/@mylabs/repositories/"$@"
    # subl .
}

# Shortcut to WordPress Projects
wp() {
    cd Sites/projects/"$1"/wp-content/themes/"$2"
    # subl .
}

# Shortcut to clone Skeleton Repository
skeleton() {
    git clone git://github.com/vitorbritto/skeleton.git "$@"
    cd "$@" && bash init.sh && npm install && subl .
    printf "Done! ✔ \n"
}

# Shortcut to start a project with Compass Blueprint
blueprint() {
    compass create "$1" --using blueprint/"$2" && cd "$1"
    printf "\n"
    printf "Done! ✔ \n"
}


# Deployment
# -------------------

# Rsync Options (in order)
# Synchronize a local directory with a remote one
# Synchronize a remote directory with a local one
# Synchronize a local file with a remote one
# To synchronize a remote file with a local one
# Synchronize a local directories (make a backup)

rsyncpulldir() {
    rsync -r -a -v -e "ssh -l $1" --delete $2
}
rsyncpushdir() {
    rsync -r -a -v -e "ssh -l $1" --delete $2
}
rsyncpullfile() {
    rsync -a -v -e "ssh -l $1" $2
}
rsyncpushfile() {
    rsync -a -v -e "ssh -l $1" $2
}
rsyncbackup() {
    rsync -r -a -v --delete $@
}

# SCP
scpp() {
    scp "$1" name@name.com:~/name.com/folder
    printf "Copying... $1" | pbcopy
    printf "Copied to clipboard: $1"
}

# Web Server
# -------------------

# Start an HTTP server from a directory, optionally specifying the port
py_server() {
    local port="${1:-8000}"
    open "http://localhost:${port}/"
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}
